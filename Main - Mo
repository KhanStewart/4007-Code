#include <cmath>
#include "Character.h"
#include <conio.h>
#pragma once
void HUD();
void Combat();
void CombatHUD();
void Moving();
void CreateMonster();
void LevelUp();
using namespace std;

int monsterHp = 0;
int monsterXP = 0;
int monsterLevel = 0;

std::string monsterName[] = {"Goblin", "Dwarf", "Orge", "Witch", "Demon", "Wizard"};
int currentMonsterNames = 5;
std::string currentMonster = " ";
int counter = 0;

Character character;

int main() {

    int i;
    std::cout << "Welcome To Endure..." << std::endl;
    std::cout << "1. Play Game"<<std::endl << "2. Save Game"<<std::endl<< "3. Inventory"<<std::endl<< "4. Exit"<<std::endl<<"-------------";
    std::cin >>i;
    switch (i){
        case 1:
            character.characterCreation();
            break;
        case 2:
            break;
        case 4:
            exit(0);
        case 3:
            struct item {
                std::string name;
            };

            int inventory();
                item items[10];
                for(int i = 0; i<10; i++);
                    items[i].name=" ";


                int choice;
                int index;
                std::string name;

                while(true) {
                    cout << "Your Inventory:";
                    for (int i = 0; i < 10; i++) {
                        cout << endl << items[i].name << endl;
                    }
                    cout << "\n1: Add item\n";
                    cout << "\n2: Drop item\n";
                    cin >> choice;

                    switch (choice) {
                        case 1:
                            cout << "Enter item name: ";
                            cin >> name;
                            for (int i = 0; i < 10; i++) {
                                if (items[i].name == " ") {
                                    items[i].name = name;
                                    break;
                                }
                            }

                            break;
                        case 2:
                            cout << "What items do you want to drop?";
                            for (int i = 0; i < 10; i++) {
                                cout << endl << i << "-" << items[i].name << endl;

                            }
                            cin >> index;
                            if (items[index].name == " ") {
                                cout << "Empty slot.\n";
                                break;
                            }
                            items[index].name = " ";
                            break;
                    }



                }



    }





   HUD();
   Moving();


    return 0;
}

void HUD(){

    _sleep(500);
    system("cls");
    std::cout << "Name: " << character.name << "    Health: " << character.totalHealth << "\nRace: " << character.race
    << "\nSex: " << character.sex << "\nLevel: " << character.level << "\nxp: " << character.current_xp << "\nXp to Level: " << character.xp_to_level << std::endl;
    Moving();
    std::cout << "\n";
}

void CombatHUD(){
    _sleep(500);
    system("cls");
    std::cout << "Name: " << character.name << "    |     Monster Name: " << currentMonster << "\nHealth: " << character.totalHealth
              << "   |   Monster Health:  " << monsterHp << "\nLevel: " << character.level << "   |   Monster Level: "  << monsterLevel << std::endl;
    std::cout << "\n";



}

void Combat () {
    CombatHUD();
    int playerAttack;
    int playerDamage = 8 * character.level / 2;

    int monsterAttack = 6 * monsterLevel / 2;


    if (character.totalHealth >= 1 && monsterHp >= 1) {
        std::cout << "\n";
        std::cout << "1. Attack\n";
        std::cout << "2. Block\n";
        std::cout << "3. RUN\n";
        std::cout << "\n";
        std::cin >> playerAttack;

    }

    if (playerAttack == 1) {
        std::cout << "Attacking... you did " << playerDamage << " to the " << currentMonster << std::endl;
        monsterHp = monsterHp - playerDamage;
        _sleep(1000);
        CombatHUD();
        if (monsterHp >= 1) {
            std::cout << "\n";
            std::cout << "Monster is Attacking..\n";
            character.totalHealth = character.totalHealth - monsterAttack;
            std::cout << "You suffered " << monsterAttack << " HP" << " You have " << character.totalHealth << "hp" << std::endl;

            if (character.totalHealth <= 0) {
                character.totalHealth = 0;
                std::cout << "You Died! \nYou were level: " << character.level << " you got killed by " << currentMonster << std::endl;
                _sleep(2000);
                exit(0);

            }

        } else if (monsterHp <= 0) {
            monsterHp = 0;
            std::cout << "\n";
            std::cout << "You Defeated " << currentMonster << " you are rewarded with " << monsterXP
                      << " xp.\nWell Done!\n";

            if (character.level != character.maxLevel){
                character.current_xp +- monsterXP;
                LevelUp();
            }


            _sleep(1000);
            HUD();

        }
        _sleep(1000);
        Combat();


    } else if (playerAttack == 2) {
        std::cout << "Blocking\n";
        int i = rand() % 100 + 1;
        if (i >= 50) {
            std::cout << "You Blocked the incoming attack\n";
            character.heal = character.level * 10 / 2;
            std::cout << "You have been Healed for " << character.heal << std::endl;
            character.totalHealth += character.heal;
            _sleep(1000);
            Combat();
        } else {
            std::cout << "You have failed to block the savage attack\n";
            character.totalHealth -= monsterAttack;
            std::cout << "You were Stabbed in the back for " << monsterAttack << " Current HP " << character.totalHealth
                      << std::endl;
            _sleep(1000);
            Combat();
        }


    } else if (playerAttack == 3) {
        std::cout << "You try to run\n";
        int x = rand() % 100 + 1;
        if (x >= 50) {
            std::cout << "You ran away\n";
            HUD();

        } else {
            std::cout << "You have failed to run away\n";
            std::cout << "Monster does a attack on you!\n";
            character.totalHealth -= monsterAttack + 10;
            std::cout << "You suffered " << monsterAttack + 10 << " Damage, Your current Health is " << character.totalHealth
                      << std::endl;
            _sleep(1000);
            Combat();
        }


    } else {

        std::cout << "Invalid Number\n";
        _sleep(500);
        Combat();


    }


    if (character.totalHealth <= 1) {
        system("cls");
        std::cout << "You Died! \nYou were level: " << character.level << " you got killed by " << currentMonster << std::endl;
        _sleep(2000);
        exit(0);

    }

    if (monsterHp <= 1) {

        LevelUp();
        std::cout << "\n";
        std::cout << "You Defeated " << currentMonster << " you are rewarded with " << monsterXP
                  << " xp.\nWell Done!\n";
        _sleep(1000);
        HUD();


    }
}

void Moving() {

    int choice;

    std::cout << "\n\n";

    std::cout << "1. Move Forward\n";
    std::cout << "2. Relax\n";
    std::cout << "3. Move Backwards\n";
    std::cout << "\n";

    std::cin >> choice;

    if (choice == 1 ){

        int temp = rand() % 100 + 1;
        std::cout << "You begin moving forward...\n";
        if (temp>=50){
            CreateMonster();
            std::string tempName = monsterName[rand() % currentMonsterNames];
            std::cout << "A " << tempName << "! Prepare to fight!\n";
            currentMonster = tempName;
            _sleep(1000);
            Combat();

        }

        std::cout << "You find nothing of interest\n";
        _sleep(1000);
        HUD();

    }

    else if (choice == 2){
        std::cout << "You want to set up camp for the evening\n";
        if (character.totalHealth <=99){
            character.totalHealth += 10 * character.level;
        }
        std::cout << "You healed by resting, Health is now " << character.totalHealth << std::endl;
        _sleep(1000);
        HUD();

    }
    else if (choice == 3){
        int temp = rand() % 100 + 1;
        std::cout << "You begin moving backwards...\n";
        if (temp>=50){
            CreateMonster();
            std::string tempName = monsterName[rand() % currentMonsterNames];
            std::cout << "A " << tempName << "! Prepare to fight!\n";
            currentMonster = tempName;
            _sleep(1000);
            Combat();

        }

        std::cout << "You find nothing of interest\n";
        _sleep(1000);
        HUD();



    }

    else {

        std::cout << "Invalid Number\n";
        _sleep(500);
        Moving();
    }


}

void LevelUp(){

    if (character.current_xp >= character.xp_to_level){

        character.xp_to_level += floor(character.level + 25 * pow(2, character.level / 7));
        character.totalHealth = floor(character.totalHealth + 13 * pow(2, character.level / 8));

        if(character.level >= character.minLevel && character.level <= character.maxLevel){
            character.level++;
        } else {

            character.level = 60;
        }

        character.maxLevel = character.totalHealth;
        std::cout << "Wait whats this a level up! you are now level " << character.level << std::endl;
        std::cout << "Your total health increased now your health is " << character.totalHealth << std::endl;
        std::cout << "\n";
        _sleep(1000);
        LevelUp();



    }



    _sleep(2000);
    HUD();


}

void CreateMonster() {
    monsterHp = 30;
    monsterLevel = (rand() % 3) + character.level;

    monsterHp = (rand() % 30) * monsterLevel;


        monsterXP = monsterHp;
        if (monsterHp == 0)
            CreateMonster();
            if (monsterLevel == 0)
                CreateMonster();
        }
